<?xml version="1.0" encoding="UTF-8"?>
<!-- @generated mapFile="xslt/MapProfdocHISMessageGetAvailableTimeslotsToInternalIF.map" md5sum="40f6f69af42e4e07932ce028d8e73bad" version="7.0.400" -->
<!--
*****************************************************************************
*   This file has been generated by the IBM XML Mapping Editor V7.0.400
*
*   Mapping file:		MapProfdocHISMessageGetAvailableTimeslotsToInternalIF.map
*   Map declaration(s):	MapProfdocHISMessageGetAvailableTimeslotsToInternalIF
*   Input file(s):		smo://smo/name%3Dwsdl-primary/transientContext%3D%257Burn%253Amvk%253Aasb%253Atakecare%253Av100%253ATakeCareServiceBO%257DTakeCareServiceBO/message%3D%257Burn%253Amvk%253Aasb%253Atakecare%253Av100%253AgetAvailableTimeslotsInternalInterface%257DinvokeTakeCareResponseMsg/xpath%3D%252F/smo.xsd
*   Output file(s):		smo://smo/name%3Dwsdl-primary/transientContext%3D%257Burn%253Amvk%253Aasb%253Atakecare%253Av100%253ATakeCareServiceBO%257DTakeCareServiceBO/message%3D%257Burn%253Amvk%253Aasb%253Atidbok%253Ainteraction%253AGetAvailableTimeslots%253A1%253A0%257DGetAvailableTimeslotsResponse/xpath%3D%252F/smo.xsd
*
*   Note: Do not modify the contents of this file as it is overwritten
*         each time the mapping model is updated.
*****************************************************************************
-->
<xsl:stylesheet
    xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
    xmlns:xalan="http://xml.apache.org/xslt"
    xmlns:str="http://exslt.org/strings"
    xmlns:set="http://exslt.org/sets"
    xmlns:math="http://exslt.org/math"
    xmlns:exsl="http://exslt.org/common"
    xmlns:date="http://exslt.org/dates-and-times"
    xmlns:in="urn:mvk:asb:takecare:v100:getAvailableTimeslotsInternalInterface"
    xmlns:in3="urn:ProfdocHISMessage:GetAvailableTimeslots:Response"
    xmlns:in2="wsdl.urn:mvk:asb:takecare:v100:getAvailableTimeslotsInternalInterface"
    xmlns:in4="urn:ProfdocHISMessage:Error"
    xmlns:io9="http://www.w3.org/2003/05/soap-envelope"
    xmlns:io="urn:mvk:asb:takecare:v100:TakeCareServiceBO"
    xmlns:io10="http://www.ibm.com/websphere/sibx/smo/v6.0.1"
    xmlns:out="wsdl.urn:mvk:asb:tidbok:interaction:GetAvailableTimeslots:1:0"
    xmlns:io11="urn:mvk:asb:tidbok:MakeBookingResponder:1:0"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xmlns:io2="urn:mvk:asb:tidbok:1:0"
    xmlns:io3="urn:mvk:asb:common:base:1"
    xmlns:io12="urn:mvk:asb:tidbok:GetAllTimeTypesResponder:1:0"
    xmlns:io4="urn:mvk:asb:tidbok:GetBookingDetailsResponder:1:0"
    xmlns:io13="urn:mvk:asb:tidbok:CancelBookingResponder:1:0"
    xmlns:io14="urn:mvk:asb:takecare:v100:TakeCareCommonAttribute"
    xmlns:io5="http://www.ibm.com/xmlns/prod/websphere/mq/sca/6.0.0"
    xmlns:io6="http://schemas.xmlsoap.org/ws/2004/08/addressing"
    xmlns:io15="http://www.ibm.com/xmlns/prod/websphere/http/sca/6.1.0"
    xmlns:io7="urn:mvk:asb:tidbok:GetSubjectOfCareScheduleResponder:1:0"
    xmlns:io16="urn:mvk:asb:tidbok:GetAvailableTimeslotsResponder:1:0"
    xmlns:xsd4xsd="http://www.w3.org/2001/XMLSchema"
    xmlns:io8="urn:mvk:asb:tidbok:GetAvailableDatesResponder:1:0"
    xmlns:io17="http://www.w3.org/2005/08/addressing"
    xmlns:io18="urn:mvk:asb:tidbok:UpdateBookingResponder:1:0"
    xmlns:TimebookUtils="xalan://se.modul1.mvk.asb.timebooking.takecare.java.TimebookUtils"
    xmlns:XmlHandler="xalan://se.modul1.mvk.asb.timebooking.takecare.java.XmlHandler"
    xmlns:map="http://MvkAsb_Timebooking_TakeCare_Adapter/xslt/MapProfdocHISMessageGetAvailableTimeslotsToInternalIF"
    xmlns:msl="http://www.ibm.com/xmlmap"
    exclude-result-prefixes="set in msl math exsl in2 in3 date in4 xalan str XmlHandler TimebookUtils map"
    version="1.0">
  <xsl:output method="xml" encoding="UTF-8" indent="no"/>

  <!-- root wrapper template  -->
  <xsl:template match="/">
    <xsl:choose>
      <xsl:when test="msl:datamap">
        <msl:datamap>
          <dataObject>
            <xsl:attribute name="xsi:type">
              <xsl:value-of select="'io10:ServiceMessageObject'"/>
            </xsl:attribute>
            <xsl:call-template name="map:MapProfdocHISMessageGetAvailableTimeslotsToInternalIF2">
              <xsl:with-param name="smo" select="msl:datamap/dataObject[1]"/>
            </xsl:call-template>
          </dataObject>
        </msl:datamap>
      </xsl:when>
      <xsl:otherwise>
        <xsl:apply-templates select="io10:smo" mode="map:MapProfdocHISMessageGetAvailableTimeslotsToInternalIF"/>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:template>

  <!-- This rule represents an element mapping: "io10:smo" to "io10:smo".  -->
  <xsl:template match="io10:smo"  mode="map:MapProfdocHISMessageGetAvailableTimeslotsToInternalIF">
    <io10:smo>
      <context>
        <transient>
          <xsl:attribute name="xsi:type">
            <xsl:value-of select="'io:TakeCareServiceBO'"/>
          </xsl:attribute>
          <!-- a simple data mapping: "body/in:invokeTakeCareResponse/in3:ProfdocHISMessage/AvailableTimeslots/@CareUnitId"(string) to "takeCareUnitID"(string) -->
          <xsl:if test="body/in:invokeTakeCareResponse/in3:ProfdocHISMessage/AvailableTimeslots/@CareUnitId">
            <takeCareUnitID>
              <xsl:value-of select="body/in:invokeTakeCareResponse/in3:ProfdocHISMessage/AvailableTimeslots/@CareUnitId"/>
            </takeCareUnitID>
          </xsl:if>
          <!-- a simple data mapping: "body/in:invokeTakeCareResponse/in3:ProfdocHISMessage/AvailableTimeslots/@CareUnitName"(string) to "takeCareUnitName"(string) -->
          <xsl:if test="body/in:invokeTakeCareResponse/in3:ProfdocHISMessage/AvailableTimeslots/@CareUnitName">
            <takeCareUnitName>
              <xsl:value-of select="body/in:invokeTakeCareResponse/in3:ProfdocHISMessage/AvailableTimeslots/@CareUnitName"/>
            </takeCareUnitName>
          </xsl:if>
        </transient>
      </context>
      <body>
        <xsl:attribute name="xsi:type">
          <xsl:value-of select="'out:GetAvailableTimeslotsResponse'"/>
        </xsl:attribute>
        <io16:GetAvailableTimeslotsResponse>
          <!-- a for-each transform: "Timeslot"(<Anonymous>) to "io16:timeslotDetail"(TimeslotType) -->
          <xsl:apply-templates select="body/in:invokeTakeCareResponse/in3:ProfdocHISMessage/AvailableTimeslots/Timeslot" mode="localTimeslotToTimeslotDetail_122863582"/>
        </io16:GetAvailableTimeslotsResponse>
      </body>
    </io10:smo>
  </xsl:template>

  <!-- This rule represents a type mapping: "io10:smo" to "io10:smo".  -->
  <xsl:template name="map:MapProfdocHISMessageGetAvailableTimeslotsToInternalIF2">
    <xsl:param name="smo"/>
    <context>
      <transient>
        <xsl:attribute name="xsi:type">
          <xsl:value-of select="'io:TakeCareServiceBO'"/>
        </xsl:attribute>
        <!-- a simple data mapping: "$smo/body/in:invokeTakeCareResponse/in3:ProfdocHISMessage/AvailableTimeslots/@CareUnitId"(string) to "takeCareUnitID"(string) -->
        <xsl:if test="$smo/body/in:invokeTakeCareResponse/in3:ProfdocHISMessage/AvailableTimeslots/@CareUnitId">
          <takeCareUnitID>
            <xsl:value-of select="$smo/body/in:invokeTakeCareResponse/in3:ProfdocHISMessage/AvailableTimeslots/@CareUnitId"/>
          </takeCareUnitID>
        </xsl:if>
        <!-- a simple data mapping: "$smo/body/in:invokeTakeCareResponse/in3:ProfdocHISMessage/AvailableTimeslots/@CareUnitName"(string) to "takeCareUnitName"(string) -->
        <xsl:if test="$smo/body/in:invokeTakeCareResponse/in3:ProfdocHISMessage/AvailableTimeslots/@CareUnitName">
          <takeCareUnitName>
            <xsl:value-of select="$smo/body/in:invokeTakeCareResponse/in3:ProfdocHISMessage/AvailableTimeslots/@CareUnitName"/>
          </takeCareUnitName>
        </xsl:if>
      </transient>
    </context>
    <body>
      <xsl:attribute name="xsi:type">
        <xsl:value-of select="'out:GetAvailableTimeslotsResponse'"/>
      </xsl:attribute>
      <io16:GetAvailableTimeslotsResponse>
        <!-- a for-each transform: "Timeslot"(<Anonymous>) to "io16:timeslotDetail"(TimeslotType) -->
        <xsl:apply-templates select="$smo/body/in:invokeTakeCareResponse/in3:ProfdocHISMessage/AvailableTimeslots/Timeslot" mode="localTimeslotToTimeslotDetail_122863582"/>
      </io16:GetAvailableTimeslotsResponse>
    </body>
  </xsl:template>

  <!-- This rule represents a for-each transform: "Timeslot" to "io16:timeslotDetail".  -->
  <xsl:template match="Timeslot"  mode="localTimeslotToTimeslotDetail_122863582">
    <io16:timeslotDetail>
      <!-- a simple data mapping: "StartTime"(unsignedLong) to "io2:startTimeInclusive"(TS) -->
      <io2:startTimeInclusive>
        <!-- variables for custom code -->
        <xsl:variable name="StartTime" select="StartTime"/>
        <xsl:value-of select="TimebookUtils:addSecondsToDateTime($StartTime)"/>
      </io2:startTimeInclusive>
      <!-- a simple data mapping: "EndTime"(unsignedLong) to "io2:endTimeExclusive"(TS) -->
      <io2:endTimeExclusive>
        <!-- variables for custom code -->
        <xsl:variable name="EndTime" select="EndTime"/>
        <xsl:value-of select="TimebookUtils:addSecondsToDateTime($EndTime)"/>
      </io2:endTimeExclusive>
      <!-- a simple mapping with no associated source:  to "io2:healthcare_facility"(HsaIdType) -->
      <io2:healthcare_facility>
        <xsl:text>Dummy healthcare facility</xsl:text>
      </io2:healthcare_facility>
      <!-- a simple mapping with no associated source:  to "io2:performer"(HsaIdType) -->
      <io2:performer>
        <xsl:value-of select="XmlHandler:setEmptyStringInXmlElement()"/>
      </io2:performer>
      <!-- a simple mapping with no associated source:  to "io2:bookingId"(BookingIdType) -->
      <io2:bookingId>
        <xsl:value-of select="XmlHandler:setEmptyStringInXmlElement()"/>
      </io2:bookingId>
      <!-- a simple mapping with no associated source:  to "io2:purpose"(string) -->
      <io2:purpose>
        <xsl:value-of select="XmlHandler:setEmptyStringInXmlElement()"/>
      </io2:purpose>
      <!-- a simple mapping with no associated source:  to "io2:reason"(string) -->
      <io2:reason>
        <xsl:value-of select="XmlHandler:setEmptyStringInXmlElement()"/>
      </io2:reason>
      <!-- a simple data mapping: "ResourceName"(string) to "io2:resourceName"(string) -->
      <xsl:if test="ResourceName">
        <io2:resourceName>
          <xsl:value-of select="ResourceName"/>
        </io2:resourceName>
      </xsl:if>
      <!-- a simple mapping with no associated source:  to "io2:healthcare_facility_name"(string) -->
      <io2:healthcare_facility_name>
        <xsl:text>Dummy healtcare facility name</xsl:text>
      </io2:healthcare_facility_name>
      <!-- a simple mapping with no associated source:  to "io2:performerName"(string) -->
      <io2:performerName>
        <xsl:value-of select="XmlHandler:setEmptyStringInXmlElement()"/>
      </io2:performerName>
      <!-- a simple data mapping: "ResourceId"(unsignedLong) to "io2:resourceID"(ResourceIDType) -->
      <xsl:if test="ResourceId">
        <io2:resourceID>
          <xsl:value-of select="ResourceId"/>
        </io2:resourceID>
      </xsl:if>
      <!-- a simple data mapping: "TimeTypeName"(string) to "io2:timeTypeName"(string) -->
      <xsl:if test="TimeTypeName">
        <io2:timeTypeName>
          <xsl:value-of select="TimeTypeName"/>
        </io2:timeTypeName>
      </xsl:if>
      <!-- a simple data mapping: "TimeTypeId"(unsignedShort) to "io2:timeTypeID"(TimeTypeIDType) -->
      <xsl:if test="TimeTypeId">
        <io2:timeTypeID>
          <xsl:value-of select="TimeTypeId"/>
        </io2:timeTypeID>
      </xsl:if>
      <!-- a simple mapping with no associated source:  to "io2:careTypeName"(string) -->
      <io2:careTypeName>
        <xsl:value-of select="XmlHandler:setEmptyStringInXmlElement()"/>
      </io2:careTypeName>
      <!-- a simple mapping with no associated source:  to "io2:careTypeID"(CareTypeIDType) -->
      <io2:careTypeID>
        <xsl:value-of select="XmlHandler:setEmptyStringInXmlElement()"/>
      </io2:careTypeID>
      <!-- a simple mapping with no associated source:  to "io2:cancel_booking_allowed"(boolean) -->
      <io2:cancel_booking_allowed>
        <xsl:text>false</xsl:text>
      </io2:cancel_booking_allowed>
      <!-- a simple mapping with no associated source:  to "io2:rebooking_allowed"(boolean) -->
      <io2:rebooking_allowed>
        <xsl:text>false</xsl:text>
      </io2:rebooking_allowed>
      <!-- a simple mapping with no associated source:  to "io2:message_allowed"(boolean) -->
      <io2:message_allowed>
        <xsl:text>true</xsl:text>
      </io2:message_allowed>
    </io16:timeslotDetail>
  </xsl:template>

  <!-- *****************    Utility Templates    ******************  -->
  <!-- copy the namespace declarations from the source to the target -->
  <xsl:template name="copyNamespaceDeclarations">
    <xsl:param name="root"/>
    <xsl:for-each select="$root/namespace::*">
      <xsl:copy/>
    </xsl:for-each>
  </xsl:template>
</xsl:stylesheet>
