<?xml version="1.0" encoding="UTF-8"?>
<!-- @generated mapFile="xslt/MapProfdocHISMessageToMvkRiv_GetSubjectOfCareSchedule_res.map" md5sum="cfe76b9eae3d1d95727163e3c783a9ec" version="7.0.400" -->
<!--
*****************************************************************************
*   This file has been generated by the IBM XML Mapping Editor V7.0.400
*
*   Mapping file:		MapProfdocHISMessageToMvkRiv_GetSubjectOfCareSchedule_res.map
*   Map declaration(s):	MapProfdocHISMessageToMvkRiv_GetSubjectOfCareSchedule_res
*   Input file(s):		smo://smo/name%3Dwsdl-primary/message%3D%257Burn%253Amvk%253Aasb%253Atakecare%253Av100%253AgetbookingInternalInterface%257DinvokeTakeCareResponseMsg/xpath%3D%252Fbody/smo.xsd
*   Output file(s):		smo://smo/name%3Dwsdl-primary/message%3D%257Burn%253Amvk%253Aasb%253Atidbok%253Ainteraction%253AGetSubjectOfCareSchedule%253A1%253A0%257DGetSubjectOfCareScheduleResponse/xpath%3D%252Fbody/smo.xsd
*
*   Note: Do not modify the contents of this file as it is overwritten
*         each time the mapping model is updated.
*****************************************************************************
-->
<xsl:stylesheet
    xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
    xmlns:xalan="http://xml.apache.org/xslt"
    xmlns:str="http://exslt.org/strings"
    xmlns:set="http://exslt.org/sets"
    xmlns:math="http://exslt.org/math"
    xmlns:exsl="http://exslt.org/common"
    xmlns:date="http://exslt.org/dates-and-times"
    xmlns:in3="wsdl.urn:mvk:asb:takecare:v100:getbookingInternalInterface"
    xmlns:in="urn:mvk:asb:takecare:v100:getbookingInternalInterface"
    xmlns:in2="urn:mvk:asb:takecare:v100:TakeCareCommonAttribute"
    xmlns:in4="urn:ProfdocHISMessage:Error"
    xmlns:in5="urn:ProfdocHISMessage:GetBookings:Response"
    xmlns:out="wsdl.urn:mvk:asb:tidbok:interaction:GetSubjectOfCareSchedule:1:0"
    xmlns:io="http://www.w3.org/2003/05/soap-envelope"
    xmlns:io3="http://www.ibm.com/xmlns/prod/websphere/mq/sca/6.0.0"
    xmlns:io2="http://www.ibm.com/websphere/sibx/smo/v6.0.1"
    xmlns:io4="http://schemas.xmlsoap.org/ws/2004/08/addressing"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xmlns:out2="urn:mvk:asb:tidbok:1:0"
    xmlns:io5="http://www.ibm.com/xmlns/prod/websphere/http/sca/6.1.0"
    xmlns:out3="urn:mvk:asb:tidbok:GetSubjectOfCareScheduleResponder:1:0"
    xmlns:out4="urn:mvk:asb:common:base:1"
    xmlns:xsd4xsd="http://www.w3.org/2001/XMLSchema"
    xmlns:io6="http://www.w3.org/2005/08/addressing"
    xmlns:TimebookUtils="xalan://se.modul1.mvk.asb.timebooking.takecare.java.TimebookUtils"
    xmlns:XmlHandler="xalan://se.modul1.mvk.asb.timebooking.takecare.java.XmlHandler"
    xmlns:map="http://Mvk_Scheduling_TakeCare_Adapter/xslt/MapProfdocHISMessageToMvkRiv_GetSubjectOfCareSchedule_res"
    xmlns:msl="http://www.ibm.com/xmlmap"
    exclude-result-prefixes="set in msl math exsl in2 in3 date in4 xalan in5 str XmlHandler TimebookUtils map"
    version="1.0">
  <xsl:output method="xml" encoding="UTF-8" indent="no"/>

  <!-- root wrapper template  -->
  <xsl:template match="/">
    <xsl:choose>
      <xsl:when test="msl:datamap">
        <msl:datamap>
          <dataObject>
            <xsl:attribute name="xsi:type">
              <xsl:value-of select="'out:GetSubjectOfCareScheduleResponse'"/>
            </xsl:attribute>
            <xsl:call-template name="map:MapProfdocHISMessageToMvkRiv_GetSubjectOfCareSchedule_res2">
              <xsl:with-param name="body" select="msl:datamap/dataObject[1]"/>
            </xsl:call-template>
          </dataObject>
        </msl:datamap>
      </xsl:when>
      <xsl:otherwise>
        <xsl:apply-templates select="body" mode="map:MapProfdocHISMessageToMvkRiv_GetSubjectOfCareSchedule_res"/>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:template>

  <!-- This rule represents an element mapping: "body" to "body".  -->
  <xsl:template match="body"  mode="map:MapProfdocHISMessageToMvkRiv_GetSubjectOfCareSchedule_res">
    <body>
      <xsl:attribute name="xsi:type">
        <xsl:value-of select="'out:GetSubjectOfCareScheduleResponse'"/>
      </xsl:attribute>
      <out3:GetSubjectOfCareScheduleResponse>
        <!-- a merge transform -->
        <xsl:variable name="Booking1" select="in:invokeTakeCareResponse/in5:ProfdocHISMessage/Bookings/Booking"/>
        <xsl:variable name="CareUnitId2" select="in:invokeTakeCareResponse/in5:ProfdocHISMessage/Bookings/@CareUnitId"/>
        <xsl:variable name="CareUnitName1" select="in:invokeTakeCareResponse/in5:ProfdocHISMessage/Bookings/@CareUnitName"/>
        <xsl:for-each select="in:invokeTakeCareResponse/in5:ProfdocHISMessage/Bookings/Booking">
          <xsl:variable name="mergeIndex" select="position()"/>
          <xsl:call-template name="localBooking_et_alToTimeslotDetail_48501697">
            <xsl:with-param name="Booking1" select="$Booking1[$mergeIndex]"/>
            <xsl:with-param name="CareUnitId2" select="$CareUnitId2"/>
            <xsl:with-param name="CareUnitName1" select="$CareUnitName1"/>
          </xsl:call-template>
        </xsl:for-each>
      </out3:GetSubjectOfCareScheduleResponse>
    </body>
  </xsl:template>

  <!-- This rule represents a type mapping: "body" to "body".  -->
  <xsl:template name="map:MapProfdocHISMessageToMvkRiv_GetSubjectOfCareSchedule_res2">
    <xsl:param name="body"/>
    <out3:GetSubjectOfCareScheduleResponse>
      <!-- a merge transform -->
      <xsl:variable name="Booking1" select="$body/in:invokeTakeCareResponse/in5:ProfdocHISMessage/Bookings/Booking"/>
      <xsl:variable name="CareUnitId2" select="$body/in:invokeTakeCareResponse/in5:ProfdocHISMessage/Bookings/@CareUnitId"/>
      <xsl:variable name="CareUnitName1" select="$body/in:invokeTakeCareResponse/in5:ProfdocHISMessage/Bookings/@CareUnitName"/>
      <xsl:for-each select="$body/in:invokeTakeCareResponse/in5:ProfdocHISMessage/Bookings/Booking">
        <xsl:variable name="mergeIndex" select="position()"/>
        <xsl:call-template name="localBooking_et_alToTimeslotDetail_48501697">
          <xsl:with-param name="Booking1" select="$Booking1[$mergeIndex]"/>
          <xsl:with-param name="CareUnitId2" select="$CareUnitId2"/>
          <xsl:with-param name="CareUnitName1" select="$CareUnitName1"/>
        </xsl:call-template>
      </xsl:for-each>
    </out3:GetSubjectOfCareScheduleResponse>
  </xsl:template>

  <!-- This rule represents a merge transform.  -->
  <xsl:template name="localBooking_et_alToTimeslotDetail_48501697">
    <xsl:param name="Booking1"/>
    <xsl:param name="CareUnitId2"/>
    <xsl:param name="CareUnitName1"/>
    <out3:timeslotDetail>
      <!-- variables for custom code -->
      <xsl:variable name="ResourceId3" select="$Booking1/Resources/Resource[1]/ResourceId"/>
      <xsl:variable name="ResourceType2" select="$Booking1/Resources/Resource[1]/ResourceType"/>
      <xsl:variable name="BookingId8" select="$Booking1/BookingId"/>
      <xsl:variable name="CareUnitId4" select="$CareUnitId2/."/>
      <xsl:variable name="StartTime7" select="$Booking1/StartTime"/>
      <xsl:variable name="EndTime2" select="$Booking1/EndTime"/>
      <xsl:variable name="TimeTypeId2" select="$Booking1/TimeTypeId"/>
      <xsl:variable name="TimeTypeName1" select="$Booking1/TimeTypeName"/>
      <xsl:variable name="ResourceName" select="$Booking1/Resources/Resource[1]/ResourceName"/>
      <xsl:variable name="PatientId1" select="$Booking1/PatientId"/>
      <xsl:variable name="PatientReason1" select="$Booking1/PatientReason"/>
      <xsl:variable name="CancelAllowed3" select="$Booking1/CancelAllowed"/>
      <xsl:variable name="RescheduleAllowed3" select="$Booking1/RescheduleAllowed"/>
      <xsl:variable name="CareUnitName3" select="$CareUnitName1/."/>
      <xsl:choose>
        <xsl:when test="$ResourceType2 = &apos;1&apos;">
          <!-- a simple data mapping: "$Booking1/StartTime"(unsignedLong) to "out2:startTimeInclusive"(TS) -->
          <out2:startTimeInclusive>
            <xsl:value-of select="$Booking1/StartTime"/>
          </out2:startTimeInclusive>
          <!-- a simple data mapping: "$Booking1/EndTime"(unsignedLong) to "out2:endTimeExclusive"(TS) -->
          <out2:endTimeExclusive>
            <xsl:value-of select="$Booking1/EndTime"/>
          </out2:endTimeExclusive>
          <!-- a simple data mapping: "$CareUnitId2"(string) to "out2:healthcare_facility"(HsaIdType) -->
          <out2:healthcare_facility>
            <xsl:value-of select="$CareUnitId2/."/>
          </out2:healthcare_facility>
          <!-- a simple data mapping: "$Booking1/Resources/Resource[1]/ResourceType"(unsignedByte) to "out2:performer"(HsaIdType) -->
          <out2:performer>
            <xsl:value-of select="$Booking1/Resources/Resource[1]/ResourceType"/>
          </out2:performer>
          <!-- a simple data mapping: "$Booking1/BookingId"(string) to "out2:bookingId"(BookingIdType) -->
          <out2:bookingId>
            <xsl:value-of select="$Booking1/BookingId"/>
          </out2:bookingId>
          <!-- a simple data mapping: "$Booking1/PatientId"(unsignedLong) to "out2:subject_of_care"(SubjectOfCareIdType) -->
          <out2:subject_of_care>
            <xsl:value-of select="$Booking1/PatientId"/>
          </out2:subject_of_care>
          <!-- a simple data mapping: "$Booking1/PatientReason"(string) to "out2:reason"(string) -->
          <out2:reason>
            <xsl:value-of select="$Booking1/PatientReason"/>
          </out2:reason>
          <!-- a simple mapping with no associated source:  to "out2:resourceName"(string) -->
          <out2:resourceName>
            <xsl:text></xsl:text>
          </out2:resourceName>
          <!-- a simple data mapping: "$CareUnitName1"(string) to "out2:healthcare_facility_name"(string) -->
          <out2:healthcare_facility_name>
            <xsl:value-of select="$CareUnitName1/."/>
          </out2:healthcare_facility_name>
          <!-- a simple data mapping: "$Booking1/Resources/Resource[1]/ResourceName"(string) to "out2:performerName"(string) -->
          <out2:performerName>
            <xsl:value-of select="$Booking1/Resources/Resource[1]/ResourceName"/>
          </out2:performerName>
          <!-- a simple mapping with no associated source:  to "out2:resourceID"(ResourceIDType) -->
          <out2:resourceID>
            <xsl:text></xsl:text>
          </out2:resourceID>
          <!-- a simple data mapping: "$Booking1/TimeTypeName"(string) to "out2:timeTypeName"(string) -->
          <out2:timeTypeName>
            <xsl:value-of select="$Booking1/TimeTypeName"/>
          </out2:timeTypeName>
          <!-- a simple data mapping: "$Booking1/TimeTypeId"(unsignedShort) to "out2:timeTypeID"(TimeTypeIDType) -->
          <out2:timeTypeID>
            <xsl:value-of select="$Booking1/TimeTypeId"/>
          </out2:timeTypeID>
          <!-- a simple data mapping: "$Booking1/CancelAllowed"(<unsignedByte>) to "out2:cancel_booking_allowed"(boolean) -->
          <out2:cancel_booking_allowed>
            <!-- variables for custom code -->
            <xsl:variable name="CancelAllowed5" select="$Booking1/CancelAllowed"/>
            <xsl:value-of select="TimebookUtils:convertToBoolean($CancelAllowed5)"/>
          </out2:cancel_booking_allowed>
          <!-- a simple data mapping: "$Booking1/RescheduleAllowed"(<unsignedByte>) to "out2:rebooking_allowed"(boolean) -->
          <out2:rebooking_allowed>
            <!-- variables for custom code -->
            <xsl:variable name="RescheduleAllowed5" select="$Booking1/RescheduleAllowed"/>
            <xsl:value-of select="TimebookUtils:convertToBoolean($RescheduleAllowed5)"/>
          </out2:rebooking_allowed>
        </xsl:when>
        <xsl:otherwise>
          <!-- a simple data mapping: "$Booking1/StartTime"(unsignedLong) to "out2:startTimeInclusive"(TS) -->
          <out2:startTimeInclusive>
            <xsl:value-of select="$Booking1/StartTime"/>
          </out2:startTimeInclusive>
          <!-- a simple data mapping: "$Booking1/EndTime"(unsignedLong) to "out2:endTimeExclusive"(TS) -->
          <out2:endTimeExclusive>
            <xsl:value-of select="$Booking1/EndTime"/>
          </out2:endTimeExclusive>
          <!-- a simple data mapping: "$CareUnitId2"(string) to "out2:healthcare_facility"(HsaIdType) -->
          <out2:healthcare_facility>
            <xsl:value-of select="$CareUnitId2/."/>
          </out2:healthcare_facility>
          <!-- a simple mapping with no associated source:  to "out2:performer"(HsaIdType) -->
          <out2:performer>
            <xsl:text></xsl:text>
          </out2:performer>
          <!-- a simple data mapping: "$Booking1/BookingId"(string) to "out2:bookingId"(BookingIdType) -->
          <out2:bookingId>
            <xsl:value-of select="$Booking1/BookingId"/>
          </out2:bookingId>
          <!-- a simple data mapping: "$Booking1/PatientId"(unsignedLong) to "out2:subject_of_care"(SubjectOfCareIdType) -->
          <out2:subject_of_care>
            <xsl:value-of select="$Booking1/PatientId"/>
          </out2:subject_of_care>
          <!-- a simple data mapping: "$Booking1/PatientReason"(string) to "out2:reason"(string) -->
          <out2:reason>
            <xsl:value-of select="$Booking1/PatientReason"/>
          </out2:reason>
          <!-- a simple data mapping: "$Booking1/Resources/Resource[1]/ResourceName"(string) to "out2:resourceName"(string) -->
          <out2:resourceName>
            <xsl:value-of select="$Booking1/Resources/Resource[1]/ResourceName"/>
          </out2:resourceName>
          <!-- a simple data mapping: "$CareUnitName1"(string) to "out2:healthcare_facility_name"(string) -->
          <out2:healthcare_facility_name>
            <xsl:value-of select="$CareUnitName1/."/>
          </out2:healthcare_facility_name>
          <!-- a simple mapping with no associated source:  to "out2:performerName"(string) -->
          <out2:performerName>
            <xsl:text></xsl:text>
          </out2:performerName>
          <!-- a simple data mapping: "$Booking1/Resources/Resource[1]/ResourceId"(unsignedLong) to "out2:resourceID"(ResourceIDType) -->
          <out2:resourceID>
            <xsl:value-of select="$Booking1/Resources/Resource[1]/ResourceId"/>
          </out2:resourceID>
          <!-- a simple data mapping: "$Booking1/TimeTypeName"(string) to "out2:timeTypeName"(string) -->
          <out2:timeTypeName>
            <xsl:value-of select="$Booking1/TimeTypeName"/>
          </out2:timeTypeName>
          <!-- a simple data mapping: "$Booking1/TimeTypeId"(unsignedShort) to "out2:timeTypeID"(TimeTypeIDType) -->
          <out2:timeTypeID>
            <xsl:value-of select="$Booking1/TimeTypeId"/>
          </out2:timeTypeID>
          <!-- a simple data mapping: "$Booking1/CancelAllowed"(<unsignedByte>) to "out2:cancel_booking_allowed"(boolean) -->
          <out2:cancel_booking_allowed>
            <!-- variables for custom code -->
            <xsl:variable name="CancelAllowed2" select="$Booking1/CancelAllowed"/>
            <xsl:value-of select="TimebookUtils:convertToBoolean($CancelAllowed2)"/>
          </out2:cancel_booking_allowed>
          <!-- a simple data mapping: "$Booking1/RescheduleAllowed"(<unsignedByte>) to "out2:rebooking_allowed"(boolean) -->
          <out2:rebooking_allowed>
            <!-- variables for custom code -->
            <xsl:variable name="RescheduleAllowed2" select="$Booking1/RescheduleAllowed"/>
            <xsl:value-of select="TimebookUtils:convertToBoolean($RescheduleAllowed2)"/>
          </out2:rebooking_allowed>
        </xsl:otherwise>
      </xsl:choose>
      <!-- a simple mapping with no associated source:  to "out2:message_allowed"(boolean) -->
      <out2:message_allowed>
        <xsl:text>true</xsl:text>
      </out2:message_allowed>
    </out3:timeslotDetail>
  </xsl:template>

  <!-- *****************    Utility Templates    ******************  -->
  <!-- copy the namespace declarations from the source to the target -->
  <xsl:template name="copyNamespaceDeclarations">
    <xsl:param name="root"/>
    <xsl:for-each select="$root/namespace::*">
      <xsl:copy/>
    </xsl:for-each>
  </xsl:template>
</xsl:stylesheet>
