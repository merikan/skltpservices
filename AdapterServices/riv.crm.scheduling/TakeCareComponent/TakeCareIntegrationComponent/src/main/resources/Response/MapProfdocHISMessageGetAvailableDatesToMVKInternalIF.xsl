<?xml version="1.0" encoding="UTF-8"?>
<!-- @generated mapFile="xslt/MapProfdocHISMessageGetAvailableDatesToMVKInternalIF.map" md5sum="669fbc66ddb14726d934a170980978e6" version="7.0.400" -->
<!--
*****************************************************************************
*   This file has been generated by the IBM XML Mapping Editor V7.0.400
*
*   Mapping file:		MapProfdocHISMessageGetAvailableDatesToMVKInternalIF.map
*   Map declaration(s):	MapProfdocHISMessageGetAvailableDatesToMVKInternalIF
*   Input file(s):		smo://smo/name%3Dwsdl-primary/transientContext%3D%257Burn%253Amvk%253Aasb%253Atakecare%253Av100%253ATakeCareServiceBO%257DTakeCareServiceBO/message%3D%257Burn%253Amvk%253Aasb%253Atakecare%253Av100%253AgetAvailableDatesInternalInterface%257DinvokeTakeCareResponseMsg/xpath%3D%252F/smo.xsd
*   Output file(s):		smo://smo/name%3Dwsdl-primary/transientContext%3D%257Burn%253Amvk%253Aasb%253Atakecare%253Av100%253ATakeCareServiceBO%257DTakeCareServiceBO/message%3D%257Burn%253Amvk%253Aasb%253Atidbok%253Ainteraction%253AGetAvailableDates%253A1%253A0%257DGetAvailableDatesResponse/xpath%3D%252F/smo.xsd
*
*   Note: Do not modify the contents of this file as it is overwritten
*         each time the mapping model is updated.
*****************************************************************************
-->
<xsl:stylesheet
    xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
    xmlns:xalan="http://xml.apache.org/xslt"
    xmlns:str="http://exslt.org/strings"
    xmlns:set="http://exslt.org/sets"
    xmlns:math="http://exslt.org/math"
    xmlns:exsl="http://exslt.org/common"
    xmlns:date="http://exslt.org/dates-and-times"
    xmlns:in2="urn:mvk:asb:takecare:v100:getAvailableDatesInternalInterface"
    xmlns:in="urn:ProfdocHISMessage:GetAvailableDates:Response"
    xmlns:in3="urn:ProfdocHISMessage:Error"
    xmlns:in4="wsdl.urn:mvk:asb:takecare:v100:getAvailableDatesInternalInterface"
    xmlns:out="wsdl.urn:mvk:asb:tidbok:interaction:GetAvailableDates:1:0"
    xmlns:io9="http://www.w3.org/2003/05/soap-envelope"
    xmlns:io="urn:mvk:asb:takecare:v100:TakeCareServiceBO"
    xmlns:io10="http://www.ibm.com/websphere/sibx/smo/v6.0.1"
    xmlns:io11="urn:mvk:asb:tidbok:MakeBookingResponder:1:0"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xmlns:io2="urn:mvk:asb:tidbok:1:0"
    xmlns:io3="urn:mvk:asb:common:base:1"
    xmlns:io12="urn:mvk:asb:tidbok:GetAllTimeTypesResponder:1:0"
    xmlns:io4="urn:mvk:asb:tidbok:GetBookingDetailsResponder:1:0"
    xmlns:io13="urn:mvk:asb:tidbok:CancelBookingResponder:1:0"
    xmlns:io14="urn:mvk:asb:takecare:v100:TakeCareCommonAttribute"
    xmlns:io5="http://www.ibm.com/xmlns/prod/websphere/mq/sca/6.0.0"
    xmlns:io6="http://schemas.xmlsoap.org/ws/2004/08/addressing"
    xmlns:io15="http://www.ibm.com/xmlns/prod/websphere/http/sca/6.1.0"
    xmlns:io7="urn:mvk:asb:tidbok:GetSubjectOfCareScheduleResponder:1:0"
    xmlns:io16="urn:mvk:asb:tidbok:GetAvailableTimeslotsResponder:1:0"
    xmlns:xsd4xsd="http://www.w3.org/2001/XMLSchema"
    xmlns:io8="urn:mvk:asb:tidbok:GetAvailableDatesResponder:1:0"
    xmlns:io17="http://www.w3.org/2005/08/addressing"
    xmlns:io18="urn:mvk:asb:tidbok:UpdateBookingResponder:1:0"
    xmlns:map="http://MvkAsb_Timebooking_TakeCare_Adapter/xslt/MapProfdocHISMessageGetAvailableDatesToMVKInternalIF"
    xmlns:msl="http://www.ibm.com/xmlmap"
    exclude-result-prefixes="xalan str set in msl math map exsl in2 date in3 in4"
    version="1.0">
  <xsl:output method="xml" encoding="UTF-8" indent="no"/>

  <!-- root wrapper template  -->
  <xsl:template match="/">
    <xsl:choose>
      <xsl:when test="msl:datamap">
        <msl:datamap>
          <dataObject>
            <xsl:attribute name="xsi:type">
              <xsl:value-of select="'io10:ServiceMessageObject'"/>
            </xsl:attribute>
            <xsl:call-template name="map:MapProfdocHISMessageGetAvailableDatesToMVKInternalIF2">
              <xsl:with-param name="smo" select="msl:datamap/dataObject[1]"/>
            </xsl:call-template>
          </dataObject>
        </msl:datamap>
      </xsl:when>
      <xsl:otherwise>
        <xsl:apply-templates select="io10:smo" mode="map:MapProfdocHISMessageGetAvailableDatesToMVKInternalIF"/>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:template>

  <!-- This rule represents an element mapping: "io10:smo" to "io10:smo".  -->
  <xsl:template match="io10:smo"  mode="map:MapProfdocHISMessageGetAvailableDatesToMVKInternalIF">
    <io10:smo>
      <body>
        <xsl:attribute name="xsi:type">
          <xsl:value-of select="'out:GetAvailableDatesResponse'"/>
        </xsl:attribute>
        <io8:GetAvailableDatesResponse>
          <!-- a merge transform -->
          <xsl:variable name="Date" select="body/in2:invokeTakeCareResponse/in:ProfdocHISMessage/AvailableDates/Date"/>
          <xsl:variable name="CareUnitId" select="body/in2:invokeTakeCareResponse/in:ProfdocHISMessage/AvailableDates/@CareUnitId"/>
          <xsl:variable name="CareUnitName" select="body/in2:invokeTakeCareResponse/in:ProfdocHISMessage/AvailableDates/@CareUnitName"/>
          <xsl:for-each select="body/in2:invokeTakeCareResponse/in:ProfdocHISMessage/AvailableDates/Date">
            <xsl:variable name="mergeIndex" select="position()"/>
            <xsl:call-template name="localDate_et_alToPerformerAvailabilityByDate_497753494">
              <xsl:with-param name="Date" select="$Date[$mergeIndex]"/>
              <xsl:with-param name="CareUnitId" select="$CareUnitId"/>
              <xsl:with-param name="CareUnitName" select="$CareUnitName"/>
            </xsl:call-template>
          </xsl:for-each>
        </io8:GetAvailableDatesResponse>
      </body>
    </io10:smo>
  </xsl:template>

  <!-- This rule represents a type mapping: "io10:smo" to "io10:smo".  -->
  <xsl:template name="map:MapProfdocHISMessageGetAvailableDatesToMVKInternalIF2">
    <xsl:param name="smo"/>
    <body>
      <xsl:attribute name="xsi:type">
        <xsl:value-of select="'out:GetAvailableDatesResponse'"/>
      </xsl:attribute>
      <io8:GetAvailableDatesResponse>
        <!-- a merge transform -->
        <xsl:variable name="Date" select="$smo/body/in2:invokeTakeCareResponse/in:ProfdocHISMessage/AvailableDates/Date"/>
        <xsl:variable name="CareUnitId" select="$smo/body/in2:invokeTakeCareResponse/in:ProfdocHISMessage/AvailableDates/@CareUnitId"/>
        <xsl:variable name="CareUnitName" select="$smo/body/in2:invokeTakeCareResponse/in:ProfdocHISMessage/AvailableDates/@CareUnitName"/>
        <xsl:for-each select="$smo/body/in2:invokeTakeCareResponse/in:ProfdocHISMessage/AvailableDates/Date">
          <xsl:variable name="mergeIndex" select="position()"/>
          <xsl:call-template name="localDate_et_alToPerformerAvailabilityByDate_497753494">
            <xsl:with-param name="Date" select="$Date[$mergeIndex]"/>
            <xsl:with-param name="CareUnitId" select="$CareUnitId"/>
            <xsl:with-param name="CareUnitName" select="$CareUnitName"/>
          </xsl:call-template>
        </xsl:for-each>
      </io8:GetAvailableDatesResponse>
    </body>
  </xsl:template>

  <!-- This rule represents a merge transform.  -->
  <xsl:template name="localDate_et_alToPerformerAvailabilityByDate_497753494">
    <xsl:param name="Date"/>
    <xsl:param name="CareUnitId"/>
    <xsl:param name="CareUnitName"/>
    <io8:performerAvailabilityByDate>
      <!-- a simple data mapping: "$CareUnitId"(string) to "io8:healthcare_facility"(HsaIdType) -->
      <io8:healthcare_facility>
        <xsl:value-of select="$CareUnitId/."/>
      </io8:healthcare_facility>
      <!-- a simple data mapping: "$Date"(unsignedInt) to "io8:date"(DT) -->
      <io8:date>
        <xsl:value-of select="$Date/."/>
      </io8:date>
      <!-- a simple data mapping: "$CareUnitName"(string) to "io8:resourceName"(string) -->
      <xsl:if test="$CareUnitName">
        <io8:resourceName>
          <xsl:value-of select="$CareUnitName/."/>
        </io8:resourceName>
      </xsl:if>
    </io8:performerAvailabilityByDate>
  </xsl:template>

  <!-- *****************    Utility Templates    ******************  -->
  <!-- copy the namespace declarations from the source to the target -->
  <xsl:template name="copyNamespaceDeclarations">
    <xsl:param name="root"/>
    <xsl:for-each select="$root/namespace::*">
      <xsl:copy/>
    </xsl:for-each>
  </xsl:template>
</xsl:stylesheet>
