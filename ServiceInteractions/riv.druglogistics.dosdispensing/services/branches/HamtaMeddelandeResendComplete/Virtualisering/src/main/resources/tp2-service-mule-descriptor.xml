<!--
 * Copyright 2009-2012 Sjukvardsradgivningen * * This library is free software; 
	you can redistribute it and/or modify * it under the terms of version 2.1 
	of the GNU Lesser General Public * License as published by the Free Software 
	Foundation. * * This library is distributed in the hope that it will be useful, 
	* but WITHOUT ANY WARRANTY; without even the implied warranty of * MERCHANTABILITY 
	or FITNESS FOR A PARTICULAR PURPOSE. See the * GNU Lesser General Public 
	License for more details. * * You should have received a copy of the GNU 
	Lesser General Public * License along with this library; if not, write to 
	the * Free Software Foundation, Inc., 59 Temple Place, Suite 330, * Boston, 
	MA 02111-1307 USA
-->
<mule 
	xmlns="http://www.mulesoft.org/schema/mule/core"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:spring="http://www.springframework.org/schema/beans"
	xmlns:doc="http://www.mulesoft.org/schema/mule/documentation"
	xmlns:vm="http://www.mulesoft.org/schema/mule/vm"
	xmlns:jdbc="http://www.mulesoft.org/schema/mule/jdbc"
	xmlns:cxf="http://www.mulesoft.org/schema/mule/cxf"
	xmlns:jms="http://www.mulesoft.org/schema/mule/jms"
	xmlns:http="http://www.mulesoft.org/schema/mule/http"
	xmlns:https="http://www.mulesoft.org/schema/mule/https"
	xmlns:mule-xml="http://www.mulesoft.org/schema/mule/xml"
	xmlns:smooks="http://www.muleforge.org/smooks/schema/mule-module-smooks"
	xmlns:json="http://www.mulesoft.org/schema/mule/json"
	xmlns:scripting="http://www.mulesoft.org/schema/mule/scripting"
	xmlns:rest-router="http://www.mulesoft.org/schema/mule/rest-router"
	xmlns:mulexml="http://www.mulesoft.org/schema/mule/xml"
	xmlns:test="http://www.mulesoft.org/schema/mule/test"
	xsi:schemaLocation="
		http://www.springframework.org/schema/beans   http://www.springframework.org/schema/beans/spring-beans-current.xsd
		http://www.mulesoft.org/schema/mule/core      http://www.mulesoft.org/schema/mule/core/current/mule.xsd
		http://www.mulesoft.org/schema/mule/vm        http://www.mulesoft.org/schema/mule/vm/current/mule-vm.xsd
		http://www.mulesoft.org/schema/mule/jdbc      http://www.mulesoft.org/schema/mule/jdbc/current/mule-jdbc.xsd
		http://www.mulesoft.org/schema/mule/cxf       http://www.mulesoft.org/schema/mule/cxf/current/mule-cxf.xsd
		http://www.mulesoft.org/schema/mule/jms       http://www.mulesoft.org/schema/mule/jms/current/mule-jms.xsd
		http://www.mulesoft.org/schema/mule/http      http://www.mulesoft.org/schema/mule/http/current/mule-http.xsd
		http://www.mulesoft.org/schema/mule/https      http://www.mulesoft.org/schema/mule/https/current/mule-https.xsd
		http://www.mulesoft.org/schema/mule/xml       http://www.mulesoft.org/schema/mule/xml/current/mule-xml.xsd
		http://www.muleforge.org/smooks/schema/mule-module-smooks http://dist.muleforge.org/smooks/schema/mule-module-smooks/1.3/mule-module-smooks.xsd
		http://www.mulesoft.org/schema/mule/json      http://www.mulesoft.org/schema/mule/json/current/mule-json.xsd
		http://www.mulesoft.org/schema/mule/scripting http://www.mulesoft.org/schema/mule/scripting/current/mule-scripting.xsd
		http://www.mulesoft.org/schema/mule/rest-router      http://www.mulesoft.org/schema/mule/rest-router/current/mule-rest-router.xsd
		http://www.mulesoft.org/schema/mule/xml       http://www.mulesoft.org/schema/mule/xml/current/mule-xml.xsd
		http://www.mulesoft.org/schema/mule/test http://www.mulesoft.org/schema/mule/test/current/mule-test.xsd
	">
    <!-- Name of this file is mandatory and may not be changed. -->


	<flow name="druglogistics-dosedispensing-HamtaMeddelandenInteraction-virtualisering-flow" >
		
		<composite-source>
      	  	<https:inbound-endpoint
        	    address="https://${TP_HOST}:${TP_PORT}/${TP_BASE_URI}/HamtaMeddelanden/1/rivtabp20"
           		connector-ref="VPProducerConnector"
            	exchange-pattern="request-response" 
            	responseTransformer-refs="featureKeepAliveResponse filterResponseHeaders">
            	<properties>
        			<spring:entry key="featureUseKeepAlive" value="${feature.keepalive.urn.riv.druglogistics.dosedispensing.HamtaMeddelandenResponder.1:${feature.keepalive}}"/>
        		</properties>
        	</https:inbound-endpoint>
        	<http:inbound-endpoint
        	    address="http://${TP_HOST}:${TP_PORT_HTTP}/${TP_BASE_URI}/HamtaMeddelanden/1/rivtabp20"
            	exchange-pattern="request-response" 
            	responseTransformer-refs="filterResponseHeaders">
        	</http:inbound-endpoint>
         </composite-source>

         <cxf:proxy-service
            	namespace="urn:riv:druglogistics:dosedispensing:HamtaMeddelanden:1:rivtabp20"
            	payload="envelope"
            	service="HamtaMeddelandenResponderService"
            	wsdlLocation="classpath:/schemas/interactions/HamtaMeddelandenInteraction/HamtaMeddelandenInteraction_1.0_RIVTABP20.wsdl" />
         
  
	    <logger message="Logpunkt1: #[headers:INBOUND:*]" level="INFO" />
		<logger message="Logpunkt1: Before request-reply: #[groovy:payload]" level="INFO" />
	    <logger message="Logpunkt1 - flowVars: #[groovy:flowVars.get('cxf_operation')]" level="INFO"/>
	    <logger message="Logpunkt1 - flowVars: #[groovy:flowVars.get('cxf_service')]" level="INFO"/>
	    <logger message="Logpunkt1 - flowVars: #[groovy:flowVars.get('featureUseKeepAlive')]" level="INFO"/>
	    <logger message="Logpunkt1 - inbound: #[groovy:message.getInboundPropertyNames()]" level="INFO"/>
	    <logger message="Logpunkt1 - inbound: #[groovy:message.getInboundProperty('http.request')]" level="INFO"/>
	    <logger message="Logpunkt1 - inbound: #[groovy:message.getInboundProperty('http.headers')]" level="INFO"/>
	    <logger message="Logpunkt1 - inbound: #[groovy:message.getInboundProperty('SOAPAction')]" level="INFO"/>
	    <logger message="Logpunkt1 - inbound: #[groovy:message.getInboundProperty('MULE_ORIGINATING_ENDPOINT')]" level="INFO"/>
	    <logger message="Logpunkt1 - inbound: #[groovy:message.getInboundProperty('MULE_REMOTE_CLIENT_ADDRESS')]" level="INFO"/>
	    
		<set-session-variable doc:name="Copying cxf_service as a session variable" variableName="original_cxf_service" value="#[groovy:flowVars.get('cxf_service')]"/>    

		<copy-properties propertyName="MULE_REMOTE_CLIENT_ADDRESS" doc:name="Copy MULE_REMOTE_CLIENT_ADDRESS"/>
		<copy-properties propertyName="MULE_CORRELATION_ID" />
		

		<!--  Get senderId. SenderIdTransformer also sets the outbound property VagvalRouter.X_VP_CONSUMER_ID to the senderId "  -->
 		<custom-processor class="dummy.skl.tp.vp.vagvalrouter.SenderIdTransformer">
			<spring:property name="senderIdPropertyName" value="${VAGVALROUTER_SENDERID}" />
			<spring:property name="whiteList" value="${IP_WHITE_LIST}" />
		</custom-processor> 		
		
		<request-reply  timeout="${SERVICE_TIMEOUT_MS}">
			<jms:outbound-endpoint connector-ref="soitoolkit-jms-connector" queue="${DRUGLOGISTICS_REQUEST_QUEUE}" transformer-refs="objToStr strToJms logReqOut" />
			<jms:inbound-endpoint  connector-ref="soitoolkit-jms-connector" queue="${DRUGLOGISTICS_RESPONSE_QUEUE}" transformer-refs="logRespIn jmsToStr"/>
		</request-reply>


		<logger message="Logpunkt10 - After request-reply element" level="INFO" />
 
		<custom-exception-strategy class="org.soitoolkit.commons.mule.error.ServiceExceptionStrategy"/>
    </flow>
  
  
    <flow name="druglogistics-dosedispensing-HamtaMeddelandenInteraction-virtualisering-rollback-flow">

        <jms:inbound-endpoint 
            name="soaphttpToJmsUsingJava-teststub-endpoint" 
            connector-ref="soitoolkit-jms-connector" 
            queue="${DRUGLOGISTICS_REQUEST_QUEUE}" 
            transformer-refs="jmsToStr"
            responseTransformer-refs="strToJms">
            <jms:transaction action="ALWAYS_BEGIN"/>
        </jms:inbound-endpoint>

        <copy-properties propertyName="MULE_CORRELATION_ID" />
        
        <logger message="Logpunkt1.1 - Payload #[groovy:payload] " level="INFO"/>
	    <logger message="Logpunkt1.1 - sessionVars: #[groovy:sessionVars.keySet()] " level="INFO"/>
	    <logger message="Logpunkt1.1 - flowVars: #[groovy:flowVars.keySet()] " level="INFO"/>
	    <logger message="Logpunkt1.1 - inbound: #[groovy:message.getInboundPropertyNames()]" level="INFO"/>
	    <logger message="Logpunkt1.1 - session: #[groovy:message.getSessionPropertyNames()]" level="INFO"/>
        
                
		<flow-ref name="druglogistics-dosedispensing-HamtaMeddelandenInteraction-virtualisering-vagval-dynamic-routing-flow">
		</flow-ref>
 
		<logger message="Logpunkt1.2 - After subflow" level="INFO" />        
        
        <rollback-exception-strategy maxRedeliveryAttempts="1" >
            
            <!-- Output logging -->
            <logger message="RETRY" level="ERROR" />
            
            <logger message="Outgoing payload: #[sessionVars['original_payload']]" level="WARN" />
            <logger message="Payload: #[payload]" level="WARN" />
            <logger message="Headers (inbound): #[headers:INBOUND:*]" level="WARN" />
            <logger message="Headers (outbound): #[headers:OUTBOUND:*]" level="WARN" />
            <logger message="Exception message: #[exception.summaryMessage]" level="WARN" />
            <logger message="Exception cause: #[exception.causeException]" level="WARN" />
            <logger message="End of RETRY output" level="WARN" />
            
            <on-redelivery-attempts-exceeded >
                <logger message="GIVE UP" level="ERROR" />
            </on-redelivery-attempts-exceeded>
        </rollback-exception-strategy>
        
    </flow>
    
    <!-- Flow with VagvalRouter -->
     <flow name="druglogistics-dosedispensing-HamtaMeddelandenInteraction-virtualisering-vagval-dynamic-routing-flow" >

		<set-variable doc:name="Setting cxf_service as a flowvar" variableName="cxf_service" value="#[groovy:sessionVars.get('original_cxf_service')]"/>    
		
	    <logger message="Logpunkt2.1 - Payload: #[groovy:payload] " level="INFO"/>
	    <logger message="Logpunkt2.1 - sessionVars: #[groovy:sessionVars.keySet()] " level="INFO"/>
	    <logger message="Logpunkt2.1 - flowVars: #[groovy:flowVars.keySet()] " level="INFO"/>
	    <logger message="Logpunkt2.1 - session: #[groovy:message.getSessionPropertyNames()]" level="INFO"/>

        <!-- Stores the payload for logging if somethings breaks while sending it -->
        <set-session-variable doc:name="Save original payload" variableName="original_payload" value="#[payload]"/>    

      
      	<transformer ref="createCorrId" />
        <transformer ref="XmlToXSR" />
        <transformer ref="rivExtractor" />
  		<transformer ref="logReqIn" />
  		
      	<logger message="Logpunkt2.2" level="INFO" />
      	
        <custom-transformer name="rivTransformer2" class="dummy.skl.tp.vp.vagvalrouter.RivTransformer" >
        	<spring:property
            	name="vagvalAgent"
            	ref="vagvalAgent" />
        	<spring:property
            	name="senderIdPropertyName"
            	value="${VAGVALROUTER_SENDERID}" />
        	<spring:property
            	name="whiteList"
            	value="${IP_WHITE_LIST}" />
  	 	</custom-transformer>
        
        
       	<logger message="Logpunkt2.3 - BEFORE Vagvalrouter #[groovy:payload] " level="INFO"/>
        
        <custom-processor class="dummy.skl.tp.vp.vagvalrouter.VagvalRouter" >

            <spring:property
                name="vagvalAgent"
                ref="vagvalAgent" />

            <spring:property
                name="senderIdPropertyName"
                value="${VAGVALROUTER_SENDERID}" />

            <spring:property
                name="responseTimeout"
                value="${SERVICE_TIMEOUT_MS}" />

            <spring:property
                name="whiteList"
                value="${IP_WHITE_LIST}" />
        </custom-processor> 
        
        
        <object-to-string-transformer />
        
        
        <logger message="Logpunkt2.4: - AFTER Vagvalrouter #[groovy:payload]" level="INFO"/>
    </flow>

</mule>
