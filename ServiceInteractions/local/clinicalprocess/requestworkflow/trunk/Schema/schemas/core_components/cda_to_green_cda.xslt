<?xml version="1.0" encoding="UTF-8"?>
<!--
This file was generated by Altova MapForce 2010r3sp1

YOU SHOULD NOT MODIFY THIS FILE, BECAUSE IT WILL BE
OVERWRITTEN WHEN YOU RE-RUN CODE GENERATION.

Refer to the Altova MapForce Documentation for further details.
http://www.altova.com/mapforce
-->
<xsl:stylesheet version="2.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform" xmlns:ns0="AlschulerAssociates::GreenCDA" xmlns:gcda="AlschulerAssociates::GreenCDA" xmlns:tbf="http://www.altova.com/MapForce/UDF/tbf" xmlns:user="http://www.altova.com/MapForce/UDF/user" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:fn="http://www.w3.org/2005/xpath-functions" xmlns:ns1="urn:hl7-org:v3" exclude-result-prefixes="ns0 tbf user xs fn">
    <xsl:template name="tbf:tbf1_TS">
        <xsl:param name="input" select="()"/>
        <xsl:for-each select="$input/@nullFlavor">
            <xsl:attribute name="nullFlavor" select="fn:string(.)"/>
        </xsl:for-each>
        <xsl:for-each select="$input/@value">
            <xsl:attribute name="value" select="fn:string(.)"/>
        </xsl:for-each>
    </xsl:template>
    <xsl:template name="tbf:tbf2_INT">
        <xsl:param name="input" select="()"/>
        <xsl:for-each select="$input/@nullFlavor">
            <xsl:attribute name="nullFlavor" select="fn:string(.)"/>
        </xsl:for-each>
        <xsl:for-each select="$input/@value">
            <xsl:attribute name="value" select="fn:string(.)"/>
        </xsl:for-each>
    </xsl:template>
    <xsl:template name="tbf:tbf3_MO">
        <xsl:param name="input" select="()"/>
        <xsl:for-each select="$input/@nullFlavor">
            <xsl:attribute name="nullFlavor" select="fn:string(.)"/>
        </xsl:for-each>
        <xsl:for-each select="$input/@value">
            <xsl:attribute name="value" select="fn:string(.)"/>
        </xsl:for-each>
        <xsl:for-each select="$input/@currency">
            <xsl:attribute name="currency" select="fn:string(.)"/>
        </xsl:for-each>
    </xsl:template>
    <xsl:param name="green_ccd10" select="'green_ccd.xml'"/>
    <xsl:param name="green_ccd11" select="'green_ccd.xml'"/>
    <xsl:param name="green_ccd12" select="'green_ccd.xml'"/>
    <xsl:param name="green_ccd13" select="'green_ccd.xml'"/>
    <xsl:param name="green_ccd14" select="'green_ccd.xml'"/>
    <xsl:param name="green_ccd15" select="'green_ccd.xml'"/>
    <xsl:param name="green_ccd16" select="'green_ccd.xml'"/>
    <xsl:param name="green_ccd17" select="'green_ccd.xml'"/>
    <xsl:param name="green_ccd3" select="'green_ccd.xml'"/>
    <xsl:param name="green_ccd4" select="'green_ccd.xml'"/>
    <xsl:param name="green_ccd5" select="'green_ccd.xml'"/>
    <xsl:param name="green_ccd6" select="'green_ccd.xml'"/>
    <xsl:param name="green_ccd7" select="'green_ccd.xml'"/>
    <xsl:param name="green_ccd8" select="'green_ccd.xml'"/>
    <xsl:param name="green_ccd9" select="'green_ccd.xml'"/>

 
<!-- Start of transformation -->
    <xsl:output method="xml" encoding="UTF-8" indent="yes"/>
    <xsl:template match="/">
        <ClinicalDocument xsi:schemaLocation="urn:hl7-org:v3 CDA.xsd" xmlns="urn:hl7-org:v3" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
            <typeId>
                <xsl:attribute name="root" namespace="" select="'2.16.840.1.113883.1.3'"/>
                <xsl:attribute name="extension" namespace="" select="'POCD_HD000040'"/>
            </typeId>
            <xsl:for-each select="request/requestId">
                <xsl:variable name="extension" as="item()*" select="@extension"/>
                <xsl:variable name="root" as="item()*" select="@root"/>
                <id>
                    <xsl:if test="fn:exists($extension)">
                        <xsl:attribute name="extension" namespace="" select="fn:string($extension)"/>
                    </xsl:if>
                    <xsl:if test="fn:exists($root)">
                        <xsl:attribute name="root" namespace="" select="fn:string($root)"/>
                    </xsl:if>
                </id>
            </xsl:for-each>
            <code code="4" codeSystem="1.2.752.129.2.2.2.24" displayName="allmänremiss"/>
            <title>Allmänremiss SLL</title>
            <xsl:for-each select="request">
                <effectiveTime>
                    <xsl:call-template name="tbf:tbf1_TS">
                        <xsl:with-param name="input" select="versionTimeStamp" as="node()"/>
                    </xsl:call-template>
                </effectiveTime>
            </xsl:for-each>
            <confidentialityCode code="N" codeSystem="2.16.840.1.113883.5.25"/>
            <xsl:for-each select="request/requestId">
                <xsl:variable name="extension" as="item()*" select="@extension"/>
                <xsl:variable name="root" as="item()*" select="@root"/>
                <setId root="1.2.752.129.2.1.2.1">
                    <xsl:if test="fn:exists($extension)">
                        <xsl:attribute name="extension" namespace="" select="fn:string($extension)"/>
                    </xsl:if>
                    <xsl:if test="fn:exists($root)">
                        <xsl:attribute name="root" namespace="" select="fn:string($root)"/>
                    </xsl:if>
                </setId>
            </xsl:for-each>
            <xsl:for-each select="request/versionNumber">
                <versionNumber>
                    <xsl:attribute name="value" namespace="" select="node()[./self::text()]"/>
                </versionNumber>
            </xsl:for-each>
            <recordTarget>
                <patientRole>
                    <xsl:for-each select="request/patient">
                        <xsl:variable name="var13_select_extension" as="item()*" select="personId/@extension"/>
                        <xsl:variable name="var14_select_root" as="item()*" select="personId/@root"/>
                        <id>
                            <xsl:if test="fn:exists($var13_select_extension)">
                                <xsl:attribute name="extension" namespace="" select="fn:string($var13_select_extension)"/>
                            </xsl:if>
                            <xsl:if test="fn:exists($var14_select_root)">
                                <xsl:attribute name="root" namespace="" select="fn:string($var14_select_root)"/>
                            </xsl:if>
                        </id>
                    </xsl:for-each>
                    <xsl:for-each select="request/patient/address">
                        <xsl:variable name="var16_select_nullFlavor" as="item()*" select="@nullFlavor"/>
                        <addr use="TMP">
                            <xsl:if test="fn:exists($var16_select_nullFlavor)">
                                <xsl:attribute name="nullFlavor" namespace="" select="fn:string($var16_select_nullFlavor)"/>
                            </xsl:if>
                            <careOf>
                                <xsl:for-each select="careOf/node()[./self::text()]">
                                    <xsl:sequence select="fn:string(.)"/>
                                </xsl:for-each>
                            </careOf>
                            <streetName>
                                <xsl:for-each select="streetName1/node()[./self::text()]">
                                    <xsl:sequence select="fn:string(.)"/>
                                </xsl:for-each>
                            </streetName>
                            <postalCode>
                                <xsl:for-each select="postalCode/node()[./self::text()]">
                                    <xsl:sequence select="fn:string(.)"/>
                                </xsl:for-each>
                            </postalCode>
                            <county>
                                <xsl:for-each select="county/node()[./self::text()]">
                                    <xsl:sequence select="fn:string(.)"/>
                                </xsl:for-each>
                            </county>
                        </addr>
                    </xsl:for-each>
                    <xsl:for-each select="request/patient/telecom">
                        <xsl:variable name="number" as="item()*" select="number/node()[./self::text()]"/>
                        <xsl:variable name="type_code" as="item()*" select="telecomType/@code"/>
                        <telecom>
                            <xsl:if test="fn:exists($type_code)">
                                <xsl:attribute name="use" namespace="" select="fn:string($type_code)"/>
                            </xsl:if>
                            <xsl:if test="fn:exists($number)">
                                <xsl:attribute name="value" namespace="" select="xs:string(xs:anyURI(fn:string($number)))"/>
                            </xsl:if>
                        </telecom>
                    </xsl:for-each>
                    <patient>
                        <xsl:for-each select="request/patient">
                            <xsl:variable name="var19_select_nullFlavor" as="item()*" select="@nullFlavor"/>
                            <name>
                                <xsl:for-each select="givenName/node()[./self::text()]">
                                    <xsl:sequence select="fn:string(.)"/>
                                </xsl:for-each>
                                <xsl:for-each select="familyName/node()[./self::text()]">
                                    <xsl:sequence select="fn:string(.)"/>
                                </xsl:for-each>
                            </name>
                        </xsl:for-each>
                        <xsl:for-each select="request/patient">
                            <xsl:variable name="var20_select_code" as="item()*" select="gender/@code"/>
                            <xsl:variable name="var21_select_nullFlavor" as="item()*" select="gender/@nullFlavor"/>
                            <xsl:variable name="var22_select_displayName" as="item()*" select="gender/@displayName"/>
                            <xsl:variable name="var23_select_codeSystemName" as="item()*" select="gender/@codeSystemName"/>
                            <xsl:variable name="var24_select_codeSystem" as="item()*" select="gender/@codeSystem"/>
                            <administrativeGenderCode>
                                <xsl:if test="fn:exists($var21_select_nullFlavor)">
                                    <xsl:attribute name="nullFlavor" namespace="" select="fn:string($var21_select_nullFlavor)"/>
                                </xsl:if>
                                <xsl:if test="fn:exists($var20_select_code)">
                                    <xsl:attribute name="code" namespace="" select="fn:string($var20_select_code)"/>
                                </xsl:if>
                                <xsl:if test="fn:exists($var24_select_codeSystem)">
                                    <xsl:attribute name="codeSystem" namespace="" select="fn:string($var24_select_codeSystem)"/>
                                </xsl:if>
                                <xsl:if test="fn:exists($var23_select_codeSystemName)">
                                    <xsl:attribute name="codeSystemName" namespace="" select="fn:string($var23_select_codeSystemName)"/>
                                </xsl:if>
                                <xsl:if test="fn:exists($var22_select_displayName)">
                                    <xsl:attribute name="displayName" namespace="" select="fn:string($var22_select_displayName)"/>
                                </xsl:if>
                            </administrativeGenderCode>
                        </xsl:for-each>
                        <xsl:for-each select="request/patient">
                            <xsl:variable name="var25_select_nullFlavor" as="item()*" select="dateOfBirth/@nullFlavor"/>
                            <xsl:variable name="var26_select_value" as="item()*" select="dateOfBirth/@value"/>
                            <birthTime>
                                <xsl:if test="fn:exists($var25_select_nullFlavor)">
                                    <xsl:attribute name="nullFlavor" namespace="" select="fn:string($var25_select_nullFlavor)"/>
                                </xsl:if>
                                <xsl:if test="fn:exists($var26_select_value)">
                                    <xsl:attribute name="value" namespace="" select="fn:string($var26_select_value)"/>
                                </xsl:if>
                            </birthTime>
                        </xsl:for-each>
                    </patient>
                </patientRole>
            </recordTarget>
            
            <xsl:for-each select="request/sender">
                <author>
                    <time>
                        <xsl:attribute name="value" namespace="" select="dateOfRequest/@value"/>
                    </time>
                    <assignedAuthor>
                        <id>
                            <xsl:attribute name="extension" namespace="" select="staff/staffId/@extension"/>
                            <xsl:attribute name="root" namespace="" select="staff/staffId/@root"/>
                        </id>
                        <code codeSystem="1.2.752.97.3.2.8.8">
                            <xsl:attribute name="code" namespace="" select="typeOfStaff/@code"/>
                            <xsl:attribute name="displayName" namespace="" select="typeOfStaff/@displayName"/>
                        </code>
                        <assignedPerson>
                            <name>
                                <xsl:for-each select="staff/staffName/node()[./self::text()]">
                                    <xsl:sequence select="fn:string(.)"/>
                                </xsl:for-each>
                            </name>
                        </assignedPerson>
                    </assignedAuthor>
                </author>
            </xsl:for-each>
            
            <xsl:for-each select="request/sender/staffOriginOrganisation">
                <custodian>
                    <assignedCustodian>
                        <representedCustodianOrganization>
                            <id>
                                <xsl:attribute name="extension" namespace="" select="careUnitId/@extension"/>
                                <xsl:attribute name="root" namespace="" select="careUnitId/@root"/>
                            </id>
                            <name>
                                <xsl:for-each select="careUnitName/node()[./self::text()]">
                                    <xsl:sequence select="fn:string(.)"/>
                                </xsl:for-each>
                            </name>
                        </representedCustodianOrganization>
                    </assignedCustodian>
                </custodian>
            </xsl:for-each>

            <!--  -->
            <xsl:for-each select="request/receiver">
                <informationRecipient>
                    <intendedRecipient>
                        <id extension="HSAid for remissmottagande person" root="1.2.752.129.2.1.4.1"/>
                        <informationRecipient>
                            <name>
                                <xsl:for-each select="staff/staffName/node()[./self::text()]">
                                    <xsl:sequence select="fn:string(.)"/>
                                </xsl:for-each>
                            </name>
                        </informationRecipient>
                        <receivedOrganization>
                            <id>
                                <xsl:attribute name="extension" namespace="" select="organisation/careUnitId/@extension"/>
                                <xsl:attribute name="root" namespace="" select="organisation/careUnitId/@root"/>
                            </id>
                            <name>
                                <xsl:for-each select="organisation/careUnitName/node()[./self::text()]">
                                    <xsl:sequence select="fn:string(.)"/>
                                </xsl:for-each>
                            </name>
                        </receivedOrganization>
                    </intendedRecipient>
                </informationRecipient>
            </xsl:for-each>

            <!-- Signature -->	
            <xsl:for-each select="request/sender/legalAuthenticator">
                <legalAuthenticator>
                    <time>
                        <xsl:attribute name="value" namespace="" select="timeOfSigning/@value"/>
                    </time>
                    <signatureCode code="S"/>
                    <assignedEntity>
                        <id>
                            <xsl:attribute name="extension" namespace="" select="signature/staffId/@extension"/>
                            <xsl:attribute name="root" namespace="" select="signature/staffId/@root"/>
                        </id>
                        <assignedPerson>
                            <name>
                                <xsl:for-each select="signature/staffName/node()[./self::text()]">
                                    <xsl:sequence select="fn:string(.)"/>
                                </xsl:for-each>
                            </name>
                        </assignedPerson>
                    </assignedEntity>
                </legalAuthenticator>
            </xsl:for-each>

            <!-- If we have referral answer adressed to a third party we create participant block -->
            <xsl:for-each select="request/alternateOutcomeReceiver">
                <xsl:variable name="staffId" as="item()*" select="staff/staffId/@extension"/>
                <xsl:if test="fn:exists($staffId)">
                    <participant typeCode="RCV">
                        <associatedEntity classCode="ASSIGNED">
                            <id extension="HSAid för remissSvarsmottagande person om sådan kan pekas ut" root="1.2.752.129.2.1.4.1"/>
                            <associatedPerson>
                                <name>Khaled Daham</name>
                            </associatedPerson>
                            <scopingOrganization>
                                <id extension="HSAid för remissSvarsmottagande organisation" root="1.2.752.129.2.1.4.1"/>
                            </scopingOrganization>
                        </associatedEntity>
                    </participant>
                </xsl:if>
            </xsl:for-each>

            <component>
                <structuredBody>
                    <component>
                        <section>
                            <code code="52535-2" codeSystem="2.16.840.1.113883.6.1" codeSystemName="LOINC" displayName="Other useful information"/>
                            <title>Övrig remissinformation</title>
                            <text/>
                                <!-- request/reasonForVersion -->
                            <xsl:for-each select="request/reasonForVersion">
                                <xsl:variable name="var119_select_code" as="item()*" select="typeOfReason/@code"/>
                                <xsl:variable name="var120_select_codeSystem" as="item()*" select="typeOfReason/@codeSystem"/>
                                <xsl:variable name="var121_select_displayName" as="item()*" select="@displayName"/>
                                <entry>
                                    <act classCode="ACT" moodCode="EVN">
                                        <code>
                                            <xsl:if test="fn:exists($var119_select_code)">
                                                <xsl:attribute name="code" namespace="" select="fn:string($var119_select_code)"/>
                                            </xsl:if>
                                            <xsl:if test="fn:exists($var120_select_codeSystem)">
                                                <xsl:attribute name="codeSystem" namespace="" select="fn:string($var120_select_codeSystem)"/>
                                            </xsl:if>
                                            <xsl:if test="fn:exists($var121_select_displayName)">
                                                <xsl:attribute name="displayName" namespace="" select="fn:string($var121_select_displayName)"/>
                                            </xsl:if>
                                        </code>
                                        <text>                                
                                            <xsl:for-each select="text/node()[./self::text()]">
                                                <xsl:sequence select="fn:string(.)"/>
                                            </xsl:for-each>
                                        </text>
                                    </act>
                                </entry>
                            </xsl:for-each>

                            <xsl:for-each select="request/additionalInformation/desiredDateForPerformance">
                                <xsl:variable name="effective_time_value_low" as="item()*" select="@start"/>
                                <xsl:variable name="effective_time_value_high" as="item()*" select="@end"/>
                                <entry>
                                    <encounter classCode="ENC" moodCode="RQO">
                                        <effectiveTime>
                                            <low>
                                                <xsl:if test="fn:exists($effective_time_value_low)">
                                                    <xsl:attribute name="value" namespace="" select="fn:string($effective_time_value_low)"/>
                                                </xsl:if>
                                            </low>
                                            <high>
                                                <xsl:if test="fn:exists($effective_time_value_high)">
                                                    <xsl:attribute name="value" namespace="" select="fn:string($effective_time_value_high)"/>
                                                </xsl:if>
                                            </high>
                                        </effectiveTime>
                                    </encounter>
                                </entry>
                            </xsl:for-each>
                            
                            <!-- Does the patient need a translator -->
                            <xsl:for-each select="request/additionalInformation/interpreterRequirement">
                                <entry>
                                    <act classCode="ACT" moodCode="EVN">
                                        <code code="TB" codeSystem="1.2.752.97.3.1.11" displayName="Tolkbehov"/>
                                        <text>
                                            <xsl:for-each select="node()[./self::text()]">
                                                <xsl:sequence select="fn:string(.)"/>
                                            </xsl:for-each>
                                        </text>
                                    </act>
                                </entry>
                            </xsl:for-each>

                                <!-- Desired recipient of a referral, f.e a specific doctor-->
                            <xsl:for-each select="request/additionalInformation/desiredRequestRecipient">
                                <entry>
                                    <act classCode="ACT" moodCode="EVN">
                                        <code code="OM" codeSystem="1.2.752.97.3.1.11" codeSystemName="ActCodeSLLeRemiss" displayName="Önskemål om remissmottagare"/>
                                        <text>
                                            <xsl:for-each select="node()[./self::text()]">
                                                <xsl:sequence select="fn:string(.)"/>
                                            </xsl:for-each>
                                        </text>
                                    </act>
                                </entry>
                            </xsl:for-each>



                                <!-- Additional administrative information -->
                            <xsl:for-each select="request/additionalInformation/administrativeInformation">
                                <entry>
                                    <act classCode="ACT" moodCode="EVN">
                                        <code code="Kompletterande_administrativ_information" codeSystem="1.2.752.97.0.0.0.0" displayName="Kompletterande administrativ information"/>
                                        <text>
                                            <xsl:for-each select="node()[./self::text()]">
                                                <xsl:sequence select="fn:string(.)"/>
                                            </xsl:for-each>
                                        </text>
                                    </act>
                                </entry>
                            </xsl:for-each>
                        </section>
                    </component>

                    <!-- Awareness information section -->
                    <component>
                        <xsl:for-each select="request/awarenessInformation">
                            <section>
                                <code code="42349-1" codeSystem="2.16.840.1.113883.6.1" codeSystemName="LOINC" displayName="Warnings"/>
                                <title>Uppmärksamhetsinformation</title>
                                <text>Här ska 'Narrative Block texten in som redovisar alla ingående klassers (entryActs) strukturerade data "mänskligt läsbar"</text>
                                <entry>
                                    <observation classCode="OBS" moodCode="EVN">
                                        <code code="UI" codeSystem="1.2.752.97.3.1.11" displayName="Uppmärksamhetsinformation"/>
                                        <text>Uppmärksamhetsinformaiton text</text>
                                        <entryRelationship typeCode="REFR">
									<!--Klinisk information som underbygger varningen-->
                                            <observation classCode="OBS" moodCode="EVN">
                                                <code/>
                                                <text>Klinisk information</text>
                                            </observation>
                                        </entryRelationship>
                                    </observation>
                                </entry>
                            </section>
                        </xsl:for-each>
                    </component>

							<!-- Referral cause section -->
                    <component>
                        <xsl:for-each select="request/questionFormulation">
                            <section>
                                <code code="42349-1" codeSystem="2.16.840.1.113883.6.1" codeSystemName="LOINC" displayName="Reason for referral"/>
                                <title>Remissorsak</title>
                                <text>Här ska 'Narrative Block texten in som redovisar alla ingående klassers (entryActs) strukturerade data "mänskligt läsbar"</text>
                                <entry>
									<!--Här anges remissfrågeställning. ALLTID en och endast en frågeställning. Frågeställning kan dock lämnas tom.-->
                                    <act classCode="PCPR" moodCode="RQO">
										<!--Ta fram OID för frågeställning-id, UUID alt 1.2.752.129.2.1.2.1 för lokalt definierat id-->
                                        <id extension="frågeställning-id unikt" root="1.2.752.129.2.1.2.1"/>
										<!--Vi måste definiera kod för remissfråga-->
                                        <code code="Remissfråga" codeSystem="1.2.752.97.0.0.0.0" displayName="Remissfråga"/>
                                        <text>Remissfråga text</text>
                                        <entryRelationship typeCode="COMP">
										<!--Här kan man sedan efterfråga/önska noll eller flera åtgärder-->
                                            <procedure classCode="PROC" moodCode="RQO">
											<!--Ta fram OID för åtgärd-id, UUID alt 1.2.752.129.2.1.2.1 för lokalt definierat id-->
                                                <id extension="åtgärd-id unikt" root="1.2.752.129.2.1.2.1"/>
                                                <code code="Åtgärdstyp_KVÅ" codeSystem="1.2.752.116.1.3.2.1.4" displayName="Åtgärdstyp"/>
                                                <text>Åtgärd text</text>
                                            </procedure>
                                        </entryRelationship>
									<!--Klinisk information som underbygger frågeställningen och åtgärd-->
                                        <entryRelationship typeCode="REFR">
                                            <observation classCode="OBS" moodCode="EVN">
                                                <code/>
                                            </observation>
                                        </entryRelationship>
                                    </act>
                                </entry>
                            </section>
                        </xsl:for-each>
                    </component>

                </structuredBody>
            </component>
        </ClinicalDocument>
    </xsl:template>
</xsl:stylesheet>
